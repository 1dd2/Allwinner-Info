--- sun4i/DRAMC_clock_output_en	2012-09-16 10:45:49.124363348 +0200
+++ boot0/DRAMC_clock_output_en	2012-09-16 10:45:25.247093382 +0200
@@ -33,12 +17,12 @@
 {
     __u32 reg_val;
 
-    reg_val = mctl_read_w(DRAM_CCM_SDRAM_CLK_REG);
+    reg_val = mctl_read_w(SDR_CR);
 
     if(on)
-        reg_val |= 0x1<<15;
+        reg_val |= 0x1<<16;
     else
-        reg_val &= ~(0x1<<15);
+        reg_val &= ~(0x1<<16);
 
-    mctl_write_w(DRAM_CCM_SDRAM_CLK_REG, reg_val);
+    mctl_write_w(SDR_CR, reg_val);
 }
--- sun4i/DRAMC_init	2012-09-17 00:22:16.061430114 +0200
+++ boot0/DRAMC_init	2012-09-17 00:23:30.302580998 +0200
@@ -1,6 +1,5 @@
 __s32 DRAMC_init(__dram_para_t *para)
 {
-    __u32 i;
     __u32 reg_val;
     __s32 ret_val;
 
@@ -14,6 +13,9 @@
     //setup DRAM relative clock
     mctl_setup_dram_clock(para->dram_clk);
 
+    // This is new unknown code!
+    mctl_write_w(SDR_0x23c, 0);
+
     //reset external DRAM
     mctl_ddr3_reset();
     mctl_set_drive();
@@ -21,9 +23,6 @@
     //dram clock off
     DRAMC_clock_output_en(0);
 
-    //select dram controller 1
-    mctl_write_w(SDR_SCSR, 0x16237495);
-
     mctl_itm_disable();
     mctl_enable_dll0();
 
@@ -52,27 +51,31 @@
     reg_val |= (para->dram_rank_num -1)<<10;
     reg_val |= 0x1<<12;
     reg_val |= ((0x1)&0x3)<<13;
+
     mctl_write_w(SDR_DCR, reg_val);
 
+    //set odt impendance divide ratio
+    reg_val=((para->dram_zq)>>8)&0xfffff;
+    reg_val |= ((para->dram_zq)&0xff)<<20;
+    reg_val |= (para->dram_zq)&0xf0000000;
+    mctl_write_w(SDR_ZQCR0, reg_val);
+
     //dram clock on
     DRAMC_clock_output_en(1);
+
 	sdelay(0x10);
 
     while(mctl_read_w(SDR_CCR) & (0x1U<<31)) {};
 
     mctl_enable_dllx();
 
-    //set odt impendance divide ratio
-    reg_val=((para->dram_zq)>>8)&0xfffff;
-    reg_val |= ((para->dram_zq)&0xff)<<20;
-    reg_val |= (para->dram_zq)&0xf0000000;
-    mctl_write_w(SDR_ZQCR0, reg_val);
-
+#if NOT_DONE
     //set I/O configure register
     reg_val = 0x00cc0000;
     reg_val |= (para->dram_odt_en)&0x3;
     reg_val |= ((para->dram_odt_en)&0x3)<<30;
     mctl_write_w(SDR_IOCR, reg_val);
+#endif
 
     //set refresh period
     DRAMC_set_autorefresh_cycle(para->dram_clk);
@@ -85,7 +88,7 @@
     //set mode register
     if(para->dram_type==3)                  //ddr3
     {
-        reg_val = 0x0;
+        reg_val = 0x1000;
         reg_val |= (para->dram_cas - 4)<<4;
         reg_val |= 0x5<<9;
     }
--- sun4i/DRAMC_set_autorefresh_cycle	2012-09-16 10:45:49.129364033 +0200
+++ boot0/DRAMC_set_autorefresh_cycle	2012-09-16 10:45:25.248093519 +0200
@@ -1,4 +1,5 @@
 
+
 /*
 *********************************************************************************************************
 * Description: Set autorefresh cycle
@@ -7,34 +8,18 @@
 *
 * Returns    : none
 *
-* Note       :
+* Note       : differs significantly from arch-sun5i/pm/standby/dram_ini.c
 *********************************************************************************************************
 */
 void DRAMC_set_autorefresh_cycle(__u32 clk)
 {
     __u32 reg_val;
-    __u32 dram_size;
     __u32 tmp_val;
 
-    dram_size = mctl_read_w(SDR_DCR);
-    dram_size >>=3;
-    dram_size &= 0x7;
-
-    if(clk < 600)
-    {
-        if(dram_size<=0x2)
-            tmp_val = (131*clk)>>10;
-        else
-            tmp_val = (336*clk)>>10;
-        reg_val = tmp_val;
+	reg_val = 131;
         tmp_val = (7987*clk)>>10;
         tmp_val = tmp_val*9 - 200;
         reg_val |= tmp_val<<8;
         reg_val |= 0x8<<24;
         mctl_write_w(SDR_DRR, reg_val);
     }
-    else
-    {
-        mctl_write_w(SDR_DRR, 0x0);
-    }
-}
--- sun4i/mctl_ddr3_reset	2012-09-16 10:45:49.135364855 +0200
+++ boot0/mctl_ddr3_reset	2012-09-16 10:45:25.249093656 +0200
@@ -1,29 +1,8 @@
 void mctl_ddr3_reset(void)
 {
     __u32 reg_val;
-    __u32 i=0;
 
-    mctl_write_w(TIMER_CPU_CFG_REG, 0);
-    reg_val = mctl_read_w(TIMER_CPU_CFG_REG);
-    reg_val >>=6;
-    reg_val &=0x3;
-    if(reg_val == 0)
-    {
         reg_val = mctl_read_w(SDR_CR);
         reg_val &= ~(0x1<<12);
         mctl_write_w(SDR_CR, reg_val);
@@ -32,14 +11,3 @@
         reg_val |= (0x1<<12);
         mctl_write_w(SDR_CR, reg_val);
     }
-    else
-    {
-        reg_val = mctl_read_w(SDR_CR);
-        reg_val |= (0x1<<12);
-        mctl_write_w(SDR_CR, reg_val);
-        sdelay(0x100);
-        reg_val = mctl_read_w(SDR_CR);
-        reg_val &= ~(0x1<<12);
-        mctl_write_w(SDR_CR, reg_val);
-    }
-}
--- sun4i/mctl_enable_dllx	2012-09-16 10:45:49.136364992 +0200
+++ boot0/mctl_enable_dllx	2012-09-16 10:45:25.250093793 +0200
@@ -1,26 +1,41 @@
 
 
+/*
+ * Note: This differs from pm/standby in that it checks the bus width
+ */
 void mctl_enable_dllx(void)
 {
     __u32 i = 0;
+    __u32 n;
+    __u32 bus_width;
 
-    for(i=1; i<5; i++)
+    bus_width = mctl_read_w(SDR_DCR);
+    bus_width >>= 6;
+    bus_width &= 7;
+
+    if (bus_width == 3) {
+	n = 5;
+    } else {
+	n = 3;
+	i = 1;
+    }
+
+    for(i=1; i<n; i++)
     {
         mctl_write_w(SDR_DLLCR0+(i<<2), (mctl_read_w(SDR_DLLCR0+(i<<2)) & ~0x40000000) | 0x80000000);
     }
 
 	sdelay(0x100);
 
-    for(i=1; i<5; i++)
+    for(i=1; i<n; i++)
     {
         mctl_write_w(SDR_DLLCR0+(i<<2), mctl_read_w(SDR_DLLCR0+(i<<2)) & ~0xC0000000);
     }
-
 	sdelay(0x1000);
 
-    for(i=1; i<5; i++)
+    for(i=1; i<n; i++)
     {
         mctl_write_w(SDR_DLLCR0+(i<<2), (mctl_read_w(SDR_DLLCR0+(i<<2)) & ~0x80000000) | 0x40000000);
     }
     sdelay(0x1000);
 }
--- sun4i/mctl_setup_dram_clock	2012-09-16 10:45:49.138365266 +0200
+++ boot0/mctl_setup_dram_clock	2012-09-16 10:45:25.251093930 +0200
@@ -12,38 +11,31 @@
     reg_val = mctl_read_w(DRAM_CCM_SDRAM_PLL_REG);
 	reg_val |= 0x1<<29;
     mctl_write_w(DRAM_CCM_SDRAM_PLL_REG, reg_val);
 
-    //reset GPS
-    reg_val = mctl_read_w(DRAM_CCM_GPS_CLK_REG);
-    reg_val &= ~0x3;
-    mctl_write_w(DRAM_CCM_GPS_CLK_REG, reg_val);
-    reg_val = mctl_read_w(DRAM_CCM_AHB_GATE_REG);
-    reg_val |= (0x1<<26);
-    mctl_write_w(DRAM_CCM_AHB_GATE_REG, reg_val);
-    sdelay(0x20);
-    reg_val = mctl_read_w(DRAM_CCM_AHB_GATE_REG);
-    reg_val &= ~(0x1<<26);
-    mctl_write_w(DRAM_CCM_AHB_GATE_REG, reg_val);
+    //setup MBUS clock
+    reg_val = (0x1<<31)|(0x2<<24)|(0x1); 	
+    mctl_write_w(DRAM_CCM_MUS_CLK_REG, reg_val);
 
-    //open DRAMC AHB clock
+    //open DRAMC AHB & DLL register clock
     //close it first
     reg_val = mctl_read_w(DRAM_CCM_AHB_GATE_REG);
-    reg_val &= ~(0x1<<14);
+    reg_val &= ~(0x3<<14);
     mctl_write_w(DRAM_CCM_AHB_GATE_REG, reg_val);
 	sdelay(0x1000);
-
     //then open it
-    reg_val |= 0x1<<14;
+    reg_val |= 0x3<<14;
     mctl_write_w(DRAM_CCM_AHB_GATE_REG, reg_val);
 	sdelay(0x1000);
 }
